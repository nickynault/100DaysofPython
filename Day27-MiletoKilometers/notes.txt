from tkinter import *

window = Tk()
window.title("My First GUI Program")
window.minsize(width=500, height=300)
window.config(padx=20, pady=20)  # just adds padding on all 4 edges of the window

# Label                               -pack() "packs" the item onto the screen. things don't display otherwise

my_label = Label(text="I am a Label", font=("Arial", 24, "bold"))
my_label.pack()                      # side("left"), expand=True, etc.

my_label["text"] = "New Text"
my_label.config(text="New Text")  # both update text

# Button

def button_clicked():
    my_label["text"] = input.get()  # displays whatever you wrote in the text box in entry section below

button = Button(text="Click Me", command=button_clicked)
button.pack()

# Entry

input = Entry(width=10)
input.insert(END, string="Some text to begin with.")
print(entry.get())
input.pack()  # an input field now displays (a text box)

# Text

text = Text(height=5, width=30)
text.focus()
text.insert(END, "Example of multi-line text entry.")

# Gets current value in textbox at line 1, character 0
print(text.get("1.0", END))
text.pack()

# Spinbox

def spinbox_used():
    # Gets the current value in spinbox.
    print(spinbox.get())

spinbox = Spinbox(from_=0, to=10, width=5, command=spinbox_used)
spinbox.pack()

# Scale
# Called with current scale value.

def scale_used(value):
    print(value)

scale = Scale(from_=0, to=100, command=scale_used)
scale.pack()

# Checkbutton

def checkbutton_used():
    #Prints 1 if On button checked, otherwise 0.
    print(checked_state.get())

# Variable to hold on to checked state, 0 is off, 1 is on.
checked_state = IntVar()
checkbutton = Checkbutton(text="Is On?", variable=checked_state, command=checkbutton_used)
checked_state.get()
checkbutton.pack()

# Radiobutton

def radio_used():
    print(radio_state.get())

# Variable to hold on to which radio button value is checked.
radio_state = IntVar()
radiobutton1 = Radiobutton(text="Option1", value=1, variable=radio_state, command=radio_used)
radiobutton2 = Radiobutton(text="Option2", value=2, variable=radio_state, command=radio_used)
radiobutton1.pack()
radiobutton2.pack()

# Listbox

def listbox_used(event):
    # Gets current selection from listbox
    print(listbox.get(listbox.curselection()))

listbox = Listbox(height=4)
fruits = ["Apple", "Pear", "Orange", "Banana"]
for item in fruits:
    listbox.insert(fruits.index(item), item)
listbox.bind("<<ListboxSelect>>", listbox_used)
listbox.pack()

window.mainloop()  # must have to display window

##################################################################################################################################################

# This function add can accept UNLIMITED ARGUMENTS, and loops through them. aka, add(1, 2) is gonna print 3, and if you do add(1, 3, 4) you get 8

def add(*args):
    sum = 0
    for n in args:
        sum += n
    return sum

print(add(num, num, num))

##################################################################################################################################################

# Same idea, but key word arguments instead of just normal ones like calculate(a=1, b=2)

def calculate(n, **kwargs):
    n += kwargs["add"]
    n += kwargs["multiply"]
    print(n)

calculate(2, add=3, multiply=5)  # you'd get 25

##################################################################################################################################################

# Creating a class with kwargs

class Car:

    def __init__(self, **kw):
        self.make = kw.get("make")
        self.model = kw.get("model")  # .get grabs what we need, and fills in None when they are left unspecified

my_car = Car(make="Nissan", model="GTR")  # if you leave something out, it returns as None
print(my_car.model)  # prints GTR

##################################################################################################################################################

# Place - a replacement for pack()

my_label.place(x=0, y=0)  # more specific, which is a pro and a con

# Grid - the most conducive layout manager

my_label.grid(column=0, row=0)  # relative to other components. if you did row=5, it'd still be in row=0, since there are no other widgets present.
# Fair warning: pack() and grid() cannot be used in the same window, EVER. it just doesn't work.
